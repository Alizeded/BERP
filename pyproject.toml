[project]
name = "BERP"
version = "0.2.0"
description = "BERP:A Blind Estimator of Room Acoustic and Physical Parameters"
authors = [
    {name = "Lijun Wang & Yixian Lu", email = "lijun.wang@jaist.ac.jp"},
    {name = "Yixian Lu", email = "mclouc@gmail.com"},
]
dependencies = [
    "packaging",
    "torch==2.4.1",
    "torchaudio",
    "lightning>=2.2.0,<3.0.0",
    "torchmetrics>=1.4.0",
    "hydra-core>=1.3.2",
    "hydra-colorlog>=1.2.0",
    "hydra-optuna-sweeper>=1.2.0",
    "Cython",
    "scipy>=1.12.0",
    "numpy>=1.26.4",
    "scikit-learn",
    "nnAudio==0.3.2",
    "librosa",
    "pandas",
    "einops>=0.8.0",
    "rootutils>=1.0.7",
    "evaluate>=0.4.1",
    "rich",
    "xformers>=0.0.28.post1",
]
requires-python = ">=3.11,<3.12"
readme = "README.md"
license = {text = "GPL-V3"}

[build-system]
requires = ["pdm-backend", "setuptools", "wheel", "Cython", "numpy"]
build-backend = "pdm.backend"

[project.optional-dependencies]
integration = ["deepspeed", "rootutils", "autoroot", "sh"]
no_isolation = [
    "xformers==0.0.28post1",
]
toolbox = [
    "pre-commit",
    "transformers",
    "tqdm",
    "pydmd",
    "torch-dct",
    "polars>=1.0.0",
    "xlstm>=1.0.4",
]

logging = [
    "wandb",
    "clearml",
    "comet",
]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
python_version = "3.11"
show_column_numbers = true
show_error_context = true
warn_return_any = true

[tool.ruff]
exclude = [
  "*/.venv/*",
  "__pycache__",
  ".git",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
indent-width = 4
line-length = 88
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "E501",  # line too long, handled by black
  "B008",  # do not perform function calls in argument defaults
  "W191",  # indentation contains tabs
  "F401",  # imported but unused
  "F403",
  "C901",  # function is too complex
  "UP007", # use `isinstance()` instead of comparing types directly
  "C419",  # unnecessary list comprehensions passed to any and all
  "C416",  # unnecessary dict, list, and set comprehension.
]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C",  # flake8-comprehensions
  "UP", # pyupgrade
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.mccabe]
# C901
max-complexity = 10


[tool.pdm]
distribution = true

[tool.pdm.build]
run-setuptools = true

[[tool.pdm.sources]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"


[[tool.pdm.source]]
include_packages = ["torch", "torchaudio"]
exclude_packages = ["*"]
name = "torch"
url = "https://download.pytorch.org/whl/cu121" # for torchaudio compatibility
verify_ssl = true


[tool.pdm.dev-dependencies]
lint = ["ruff"]
test = [
    "pytest",
]
doc = [
    "pdoc",
]
type = [
    "mypy",
]
notebook = [
    "jupyter",
    "jupyterlab",
]
plot = [
    "matplotlib",
    "seaborn",
]

