[project]
name = "BERP"
version = "0.2.1"
description = "BERP:A Blind Estimator of Room Acoustic and Physical Parameters"
authors = [
    {name = "Lijun Wang & Yixian Lu", email = "lijun.wang@jaist.ac.jp"},
    {name = "Yixian Lu", email = "mclouc@gmail.com"},
]
dependencies = [
    "lightning>=2.2.0,<3.0.0",
    "torchmetrics>=1.4.0",
    "hydra-core>=1.3.2",
    "hydra-colorlog>=1.2.0",
    "hydra-optuna-sweeper>=1.2.0",
    "scipy>=1.12.0",
    "numpy>=1.26.4",
    "scikit-learn",
    "nnAudio==0.3.2",
    "librosa",
    "pandas",
    "einops>=0.8.0",
    "rootutils>=1.0.7",
]
requires-python = ">=3.11,<3.12"
readme = "README.md"
license = {text = "GPL-V3"}

[build-system]
requires = ["pdm-backend", "setuptools", "wheel", "Cython", "numpy"]
build-backend = "pdm.backend"

[project.optional-dependencies]
# PyTorch/CUDA specific groups
cpu = [
    "torch==2.7.0+cpu",
    "torchaudio",
]
cu121 = [
    "torch==2.5.1+cu121",
    "torchaudio",
    "xformers", 
    "deepspeed",
]
cu126 = [
    "torch==2.7.0+cu126",
    "torchaudio",
    "xformers",
    "deepspeed",
]

integration = ["rootutils", "autoroot", "sh"]
toolbox = [
    "pre-commit",
    "transformers",
    "tqdm",
    "pydmd",
    "torch-dct",
    "polars>=1.0.0",
    "xlstm>=1.0.4",
]
logging = [
    "wandb",
]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
python_version = "3.11"
show_column_numbers = true
show_error_context = true
warn_return_any = true

[tool.ruff]
exclude = [
  "*/.venv/*", "__pycache__", ".git", ".bzr", ".direnv", ".eggs",
  ".git-rewrite", ".hg", ".ipynb_checkpoints", ".mypy_cache", ".nox",
  ".pants.d", ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache", ".svn",
  ".tox", ".vscode", "__pypackages__", "_build", "buck-out", "build",
  "dist", "node_modules", "site-packages", "venv",
]
indent-width = 4
line-length = 88
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "E501", "B008", "W191", "F401", "F403", "C901", "UP007", "C419", "C416",
]
select = ["E", "W", "F", "I", "B", "C", "UP"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pdm]
distribution = true

[tool.pdm.build]
run-setuptools = true

# Define package sources. PDM will search these for packages.
# The order might matter if multiple sources provide the same package/version without local identifiers.
# However, by specifying exact versions with local identifiers (e.g., torch==2.5.1+cu121),
# PDM should find them in the correct source.

[[tool.pdm.source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[[tool.pdm.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
verify_ssl = true
include_packages = ["torch", "torchaudio"]
exclude_packages = ["*"]

[[tool.pdm.source]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
verify_ssl = true
include_packages = ["torch", "torchaudio", "xformers"]
exclude_packages = ["*"]

[[tool.pdm.source]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
verify_ssl = true
include_packages = ["torch", "torchaudio", "xformers"]
exclude_packages = ["*"]

[tool.pdm.dev-dependencies]
lint = ["ruff"]
test = ["pytest"]
doc = ["pdoc"]
type = ["mypy"]
notebook = ["jupyter", "jupyterlab"]
plot = ["matplotlib", "seaborn"]